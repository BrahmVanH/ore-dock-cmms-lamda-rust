//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub first_name: String,
    pub last_name: String,
    pub role: String,
    pub department: String,
    pub contact_number: String,
    pub hire_date: Option<DateTimeWithTimeZone>,
    pub status: String,
    pub certification_levels: Json,
    pub profile_image_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::maintenance_schedule::Entity")]
    MaintenanceSchedule,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::permission_log::Entity")]
    PermissionLog,
    #[sea_orm(has_many = "super::user_notification_preferences::Entity")]
    UserNotificationPreferences,
    #[sea_orm(has_one = "super::user_preferences::Entity")]
    UserPreferences,
    #[sea_orm(has_many = "super::work_order::Entity")]
    WorkOrder,
}

impl Related<super::maintenance_schedule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MaintenanceSchedule.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::permission_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionLog.def()
    }
}

impl Related<super::user_notification_preferences::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserNotificationPreferences.def()
    }
}

impl Related<super::user_preferences::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPreferences.def()
    }
}

impl Related<super::work_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkOrder.def()
    }
}

impl Related<super::notification_template::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_notification_preferences::Relation::NotificationTemplate.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::user_notification_preferences::Relation::User
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::maintenance_schedule::Entity")]
    MaintenanceSchedule,
    #[sea_orm(entity = "super::notification::Entity")]
    Notification,
    #[sea_orm(entity = "super::permission_log::Entity")]
    PermissionLog,
    #[sea_orm(entity = "super::user_notification_preferences::Entity")]
    UserNotificationPreferences,
    #[sea_orm(entity = "super::user_preferences::Entity")]
    UserPreferences,
    #[sea_orm(entity = "super::work_order::Entity")]
    WorkOrder,
    #[sea_orm(entity = "super::notification_template::Entity")]
    NotificationTemplate,
}
