//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "notification_template")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub r#type: String,
    #[sea_orm(column_type = "Text")]
    pub message_template: String,
    pub default_severity: String,
    pub channels: Option<Json>,
    pub placeholders: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::user_notification_preferences::Entity")]
    UserNotificationPreferences,
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::user_notification_preferences::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserNotificationPreferences.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_notification_preferences::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::user_notification_preferences::Relation::NotificationTemplate
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::notification::Entity")]
    Notification,
    #[sea_orm(entity = "super::user_notification_preferences::Entity")]
    UserNotificationPreferences,
    #[sea_orm(entity = "super::user::Entity")]
    User,
}
