//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "temp_role_elevation")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub original_role_id: Uuid,
    pub elevated_role_id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub reason: Option<String>,
    pub requested_by_user_id: Uuid,
    pub approved_by_user_id: Option<Uuid>,
    pub start_time: DateTimeWithTimeZone,
    pub end_time: DateTimeWithTimeZone,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::ElevatedRoleId",
        to = "super::role::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Role2,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::OriginalRoleId",
        to = "super::role::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Role1,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::ApprovedByUserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    User3,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::RequestedByUserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User1,
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::role::Entity", def = "Relation::Role2.def()")]
    Role2,
    #[sea_orm(entity = "super::role::Entity", def = "Relation::Role1.def()")]
    Role1,
    #[sea_orm(entity = "super::user::Entity", def = "Relation::User3.def()")]
    User3,
    #[sea_orm(entity = "super::user::Entity", def = "Relation::User2.def()")]
    User2,
    #[sea_orm(entity = "super::user::Entity", def = "Relation::User1.def()")]
    User1,
}
