//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_notification_preferences")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub notification_template_id: Uuid,
    pub preferred_channels: Option<Json>,
    pub enabled: bool,
    pub do_not_disturb: bool,
    pub quiet_hours_start: Option<Time>,
    pub quiet_hours_end: Option<Time>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::notification_template::Entity",
        from = "Column::NotificationTemplateId",
        to = "super::notification_template::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    NotificationTemplate,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::notification_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NotificationTemplate.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::notification_template::Entity")]
    NotificationTemplate,
    #[sea_orm(entity = "super::user::Entity")]
    User,
}
