//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vendor")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub phone_number: String,
    pub website: String,
    pub email_address: String,
    pub vendor_category_id: Uuid,
    pub tax_id: String,
    pub payment_terms: String,
    pub primary_contact_name: String,
    pub primary_contact_title: String,
    pub account_status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::asset::Entity")]
    Asset,
    #[sea_orm(
        belongs_to = "super::vendor_category::Entity",
        from = "Column::VendorCategoryId",
        to = "super::vendor_category::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    VendorCategory,
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Asset.def()
    }
}

impl Related<super::vendor_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VendorCategory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::asset::Entity")]
    Asset,
    #[sea_orm(entity = "super::vendor_category::Entity")]
    VendorCategory,
}
